/*
 *  Testing pseudo-register 6502 assembly
 */

sub reset @$D000 {
  cld									; reset to known stage
  ldx #$ff
  txs

	lda $c051						; minimal Apple ][ setup
	lda $c054
	lda $c058						; AN0 = TTL hi
	lda $c05a						; AN1 = TTL hi
	lda $c05d						; AN2 = TTL lo
	lda $c05f						; AN3 = TTL lo
	lda $cfff						; turn off extension ROM
	bit $c010
	jsr clear_screen
  jsr copy_to_RAM

  jsr wait_for_key
  jsr big_registers

  jsr wait_for_key

  jsr copy_to_RAM
  jsr pseudo_ops

  jsr wait_for_key

  jsr copy_to_RAM
  jsr traditional

 forever:
  jsr wait_for_key
  clv
  bvc -forever
}

sub big_registers @$D800 {
	ldy #0
 loop_Y:
	lda #0									; Is the data sorted (variable $FF = #0 if sorted and #1 if not)
	sta 255
	ldx #0									; Loop forward so that items move from left to right
 loop_X:
  jsr wait_for_key
	lda.t $400,X
	cmp.t $403,X					  ; Compare all three bytes in one opcode
	beq	+next								; IF (X+1 == X) THEN next loop
	bcc	+next								; IF (X+1 > X) THEN next loop
 swap:
	lda.t $400,X						; Swap $400,X <-> $403,X using $00/1/2 as a 24-bit "register"
	sta.t $00
	lda.t $403,X
	sta.t $400,X
	lda.t $00
	sta.t $403,X
	inc 255									; No, the data isn't sorted
 next:
  inx
  inx
  inx
	cpx #27									; Loop N-1 items (N=10, each items is 3 bytes), so 9x3 = 27
	bne -loop_X
  iny
	lda 255
	bne -loop_Y
	rts
}

sub pseudo_ops @$E000 {
	  lda $A2
	  sta $50D
	ldy #0
 loop_Y:
	ld_r255 #0							; Is the data sorted (variable $FF = #0 if sorted and #1 if not)
	ldx #0									; Loop forward so that items move from left to right
 loop_X:
	ld_t0 $400,X
	ld_t3 $403,X
	  stx $508
	ccct0 t3							  ; Compare all three bytes in one mnemonic (only the carry bit)
	bcc	+next								; IF (X+1 >= X) THEN next loop
	  lda $400,X
	  sta $500
	  lda $401,X
	  sta $501
	  lda $403,X
	  sta $503
	  lda $404,X
	  sta $504
	  lda $FF
	  sta $506
 swap:
	ld_t0 $400,X
	mv_t $403,X $400,X		; "Direct" memory to memory copy
	st_t0 $403,X
	ld_r255 #1							; No, the data isn't sorted
  jsr wait_for_key
 next:
  inx
  inx
  inx
	cpx #27									; Loop N-1 items (N=10, each items is 3 bytes), so 9x3 = 27
	beq +test
	jmp loop_X
 test:
	ld_r255
	beq +done
	jmp loop_Y
 done:
	rts
}

sub traditional @$F000 {
	ldy #0
 loop_Y:
	lda #00									; Is the data sorted (variable $FF = #0 if sorted and #1 if not)
	sta $FF
	ldx #0									; Loop forward so that items move from left to right
 loop_X:
	lda $400,X
	cmp $403,X							; N[X][0] ?= N[X+1][0]
	beq	+byte2							; IF (X+1 == X) THEN check next byte
	bcs	+swap								; IF (X+1 < X) THEN swap
	clv
	bvc +next
 byte2:
	lda $401,X
	cmp $404,X
	beq	+byte3							; IF (X+1 == X) THEN check the next byte
	bcs	+swap								; IF (X+1 < X) THEN swap
	clv
	bvc +next
 byte3:
	lda $402,X
	cmp $405,X
	beq	+next								; IF (X+1 == X) THEN no swap
	bcc	+next								; IF (X+1 < X) THEN next loop
 swap:
  lda $400,X							; $400/1/2,X -> $00/1/2
  sta $00
  lda $401,X
  sta $01
  lda $402,X
  sta $02
  lda $403,X							; $403/4/5,X -> $400/1/2,X
  sta $400,X
  lda $404,X
  sta $401,X
  lda $405,X
  sta $402,X
  lda $00									; $00/1/2 -> $403/4/5,X
  sta $403,X
  lda $01
  sta $404,X
  lda $02
  sta $405,X
	inc 255									; No, the data isn't sorted
  jsr wait_for_key
 next:
  inx
  inx
  inx
	cpx #27									; Loop N-1 items (N=10, each items is 3 bytes), so 9x3 = 27
	bne -loop_X
	lda $FF
	bne -loop_Y
	rts
}

sub showing_off @$F600 {
	ld_r8 #$12
	ld_w8 #$1234
	ld_t8 #$123456
}

sub clear_screen @$F800 {
  lda #$a0						; clear the top of the Apple ][ screen
  ldx #0
 cls_loop:
  sta $400,X
  sta $480,X
  sta $500,X
  sta $580,X
  sta $600,X
  sta $680,X
  sta $700,X
  sta $780,X
  inx
  cpx #40
  bne -cls_loop
  rts
}

sub copy_to_RAM {
	ldx #0
 copy_loop:
	lda sort_me,X
	sta $400,X
	inx
	cpx #29							; 30 = 10 items @ 3 bytes ea
	bne -copy_loop
	rts
}

sub wait_for_key {
 loop:
	bit $c000 				; check keyboard for next key
	bpl -loop
	bit $c010					; clear keyboard strobe (a.k.a. ack keyboard read)
	rts
}


data sort_me @$FF00 byte {
	$D4, $DA, $A0 // TZ
	$C2, $C1, $A0 // BA
	$D5, $C1, $A0 // UA
	$C2, $C2, $A0 // BB
	$C2, $C2, $A0 // BB
	$CC, $C3, $A0 // LD
	$C5, $C5, $A0 // EE
	$D3, $D8, $A0 // SX
	$CF, $D9, $A0 // OY
	$D2, $D9, $A0 // RY

/*** DEBUGGING ******
	$D4, $DA, $A0 // TZ
	$C2, $C2, $A0 // BB
	$C2, $C2, $A0 // BB
	$CC, $C3, $A0 // LD
	$C5, $C5, $A0 // EE
	$D3, $D8, $A0 // SX
	$CF, $D9, $A0 // OY
	$D2, $D9, $A0 // RY
	$D5, $C1, $A0 // UA
	$C2, $C1, $A0 // BA

	$DA, $D4, $A0 // ZT
	$C2, $C2, $A0 // BB
	$C2, $C2, $A0 // BB
	$C3, $CC, $A0 // DL
	$C5, $C5, $A0 // EE
	$D8, $D3, $A0 // XS
	$D9, $CF, $A0 // YO
	$D9, $D2, $A0 // YR
	$C1, $D5, $A0 // AU
	$C1, $C2, $A0 // AB

	$C5, $C5, $A0 // EE
	$C1, $C1, $C1 // AAA
	$C1, $C1, $C2 // AAB
	$C1, $C1, $C3 // AAC
	$C1, $C1, $A0 // AA
	$CD, $CD, $A0 // MM
	$D8, $D8, $A0 // XX
	$D7, $D7, $A0 // WW
	$D9, $D9, $A0 // YY
	$DA, $DA, $A0 // ZZ

	$DA, $DA, $A0 // ZZ
	$D9, $D9, $A0 // YY
	$D8, $D8, $A0 // XX
	$D7, $D7, $A0 // WW
	$C5, $C5, $A0 // EE
	$CD, $CD, $A0 // MM
	$C8, $C8, $A0 // HH
	$C3, $C3, $A0 // CC
	$C2, $C2, $A0 // BB
	$C1, $C1, $A0 // AA

	$DA, $D4, $A0 // ZT
	$C2, $C2, $A0 // BB
	$C2, $C2, $A0 // BB
	$C3, $CC, $A0 // DL
	$C5, $C5, $A0 // EE
	$D8, $D3, $A0 // XS
	$D9, $CF, $A0 // YO
	$D9, $D2, $A0 // YR
	$C1, $D5, $A0 // AU
	$C1, $C2, $A0 // AB
********************/
}


/*
 *  NMI, RST, and IRQ vectors
 */
data Vectors @$FFFA word {
	$0000, $D000, $0000
}
