/*
 *  BIN EDIT - Editor for BIN files
 *
 *  aCCemble -l run/BIN\ EDIT.lst -o ../root/OS4/BIN\ EDIT.run run/BIN\ EDIT.ac
 *
 */

#include "os4/globals.ac"
#include "os4/os4.ac"

const N_COMMANDS	= 6		// The number of commands in CommandList

global INPBUFFER 	= @$100		// $100-$14F holds the line of text being typed
global INPBUFFER2 	= @$150		// $150-$1BF holds the previous line of text typed
global INPBUFFER3 	= @$1A0		// $1A0-$1EF holds the previous previous line of text typed

global ScreenBase	= %R128.w
global CURSORX		= %R130
global CURSORY		= %R131
global LASTKEY		= %R132
global EDITING		= %R133
global VIEWYFROM	= %R134.w
global VIEWYTO		= %R136.w
global OLDVALUEH	= %R138
global OLDVALUEL	= %R139
global NEWVALUEH	= %R140
global NEWVALUEL	= %R141
global FILESIZE		= %R142.w
global NFILEROWS	= %R145.w
global SAVEDROW		= %R147
global SAVEDPOS		= %R148

/*
 *  Edit a BIN file
 */
sub BINedit(NPRM %%0, CMD %%0.1.t, FILENAME %%0.4.t) @$10000 {
	lda #DISP_TEXT_1			; First clear the command line screen
	jsr (os4_SetScreenMode)
	lda #2
	sta @TXTROW
	stz @TXTPOS
	ldx #0
	jsr (os4_ClearScreen)

	lda #DISP_TEXT_2			; then switch to TEXT 2 to display the file
	jsr (os4_SetScreenMode)
	jsr clearText2Screen

	stz @CURSORX
	stz @CURSORY
	stz @EDITING
	stz @OLDVALUEH
	stz @OLDVALUEL
	stz @NEWVALUEH
	stz @NEWVALUEL
	stz.w @VIEWYFROM
	stz.w @VIEWYTO

	FOR X = 0 TO 39 {
		lda Header,x
		beq +BREAK
		ora #$80
		sta $404,x
	}

	lda @NPRM
	IF (==) {
		lda.w #1024
		sta.w @FILESIZE
		jsr calculateRows
	}
	ELSE {
		jsr DoLoad
	}
	jsr drawValues
	jsr drawCursor

	jsr ClearInputBuffers
	LOOP {
		jsr (os4_SetScreenBase)			; Set the @TXTPTR based on @TXTROW
		lda @TXTPOS
		IF == {
			lda #'B'H					; Draw the 'B:' prompt
			jsr (os4_PrintChar)
			lda @PMPTCHR
			jsr (os4_PrintChar)
			jsr (os4_PrintCursor)		; Draw the cursor
		}
		LOOP {
			bit KBD 					; check keyboard for next key
			IF - {
				BREAK
			}
		}
		lda KBD 						; get the key code from the keyboard and ack the read
		sta @LASTKEY
jsr debugValueT2
lda @LASTKEY
		bit KBDSTRB
		IF == $8D {						; 13 = CR ($80 | $0D in high ASCII)
			lda @EDITING
			if (!=) {					; if editing, store the new value and stop editing
				jsr storeNewValue
				jsr endEditing
				jsr hideEditCursor
				CONTINUE
			}
			ELSE {
				lda @TXTPOS
				cmp #2
				IF (==) {				; if nothing is typed, then use ENTER to edit under the cursor
					jsr startEditing
					CONTINUE
				}
				ELSE {
					jsr (os4_ClearCursor)
					jsr (os4_NextLine)
					jsr CurrentToPrevInputBuffer
					stz %%0.255
					jsr CommandLine
					sta %%0.255
					jsr ClearCurrentInputBuffer

					lda %%0.255			; End the program?
					if (== $ff) {
						RETURN 0
					}
				}
			}
			CONTINUE
		}
		IF == $FF {						; 127 = DEL ($80 | $7F in high ASCII)
			lda @EDITING
			if (!=) {					; if editing, store the new value and stop editing
				lda @NEWVALUEL
				IF (!=) {
					stz @NEWVALUEL
				}
				ELSE {
					lda @NEWVALUEH
					IF (!=) {
						stz @NEWVALUEH
					}
				}
				jsr showEditCursor
				CONTINUE
			}
			ELSE {
				lda @TXTPOS
				IF > 2 {
					jsr (os4_ClearCursor)	; Erase the cursor
					lda #' 'H				; Erase the current character
					ldy @TXTPOS
					dey
					sta (@TXTPTR),y
					dey						; Delete the last character in the text buffer
					lda #0
					sta @INPBUFFER,y
					dec @TXTPOS				; Decrement the text position
					jsr (os4_PrintCursor)
				}
				CONTINUE
			}
		}
		IF == $89 {						; 9 = Tab ($80 | $09 in high ASCII)
			lda @EDITING
			IF (!=) {					; if editing, stop editing
				jsr cancelEditing
			}
			jsr CompleteCommand
			CONTINUE
		}
		IF == $9A {						; 26 = Control-Z ($80 | $1A in high ASCII)
			lda @EDITING
			IF (!=) {					; if editing, stop editing
				jsr cancelEditing
			}
			jsr PrevToCurrentInputBuffer
			jsr InputBufferToTextScreen
			jsr (os4_PrintCursor)
			CONTINUE
		}
		IF == $9B {						; 27 = ESC ($80 | $1B in high ASCII)
			lda @DISPMODE
			cmp #DISP_TEXT_1
			IF (==) {
				lda #DISP_TEXT_2		; Toggle to TEXT page 2
			}
			ELSE {
				lda #DISP_TEXT_1		; Toggle to TEXT page 1
			}
			jsr (os4_SetScreenMode)
			CONTINUE
		}
		IF == $88 {						; 8 = Left Arrow ($80 | $08 in high ASCII)
			lda @EDITING
			IF (!=) {					; if editing, stop editing
				jsr cancelEditing
			}
			jsr hideCursor
			lda @CURSORX
			cmp #0
			IF (>) {
				dec
				sta @CURSORX
			}
			jsr drawCursor
			CONTINUE
		}
		IF == $95 {						; 21 = Right Arrow ($80 | $15 in high ASCII)
			lda @EDITING
			IF (!=) {					; if editing, stop editing
				jsr cancelEditing
			}
			jsr hideCursor
			lda @CURSORX
			cmp #7
			IF (<) {
				inc
				sta @CURSORX
			}
			jsr drawCursor
			CONTINUE
		}
		IF == $8B {						; 12 = Up Arrow ($80 | $0B in high ASCII)
			lda @EDITING
			IF (!=) {					; if editing, stop editing
				jsr cancelEditing
			}
			jsr hideCursor
			lda @CURSORY
			cmp #0
			IF (==) {
				lda.w @VIEWYFROM
				if (>) {
					dec.w @VIEWYFROM
					jsr updateViewableRows
					jsr drawValues
				}
			}
			ELSE {
				IF (>) {
					dec
					sta @CURSORY
				}
			}
			jsr drawCursor
			CONTINUE
		}
		IF == $8A {						; 11 = Down Arrow ($80 | $0A in high ASCII)
			lda @EDITING
			IF (!=) {					; if editing, stop editing
				jsr cancelEditing
			}
			jsr hideCursor
			lda @CURSORY
			IF (== 23) {
				lda.w @VIEWYTO			; IF there are more rows to view
				inc.w
				cmp.w @NFILEROWS
				IF (<) {
					inc.w @VIEWYFROM
					jsr updateViewableRows
					jsr drawValues
				}
			}
			ELSE {
				cmp.w @VIEWYTO
				IF (<) {
					inc
					sta @CURSORY
				}
			}
			jsr drawCursor
			CONTINUE
		}
		IF == $AB {						; 43 = + = PLUS ($80 | $2B in high ASCII)
			lda @EDITING
			IF (!=) {					; if editing, stop editing
				jsr cancelEditing
			}
			jsr hideCursor
			lda.w @VIEWYFROM			; page down 24 rows
			clc
			adc.w #24
			cmp.w @VIEWYTO
			IF (<) {
				sta.w @VIEWYFROM
				jsr updateViewableRows
				jsr drawValues
			}
			jsr drawCursor
			CONTINUE
		}
		IF == $AD {						; 45 = - = MINUS ($80 | $2D in high ASCII)
			lda @EDITING
			IF (!=) {					; if editing, stop editing
				jsr cancelEditing
			}
			jsr hideCursor
			lda.w @VIEWYFROM			; page down 24 rows
			cmp #24
			IF (>) {
				sec
				sbc.w #24
				sta.w @VIEWYFROM
				jsr updateViewableRows
				jsr drawValues
			}
			jsr drawCursor
			CONTINUE
		}
		IF > $9F {						; >31 = Not a control character ($80 | $1F in high ASCII)
			lda @EDITING
			IF (!=) {					; if editing, stop editing
				jsr enterKeyWhileEditing
			}
			ELSE {
				lda @LASTKEY
				ldy @TXTPOS
				jsr (os4_PrintChar)
				cpy #40 					; Ignore IF >= column 40
				IF < {
					lda @LASTKEY
					and #$7F				; store (low) ASCII in TEXT buffer
					dey 					; Y-2 as the command starts at POS=3, after the 'lo:' prompt
					dey
					sta @INPBUFFER,y
					jsr (os4_PrintCursor)
				}
			}
		}
	}
	; loop forever
}


/*
 *  Handle a key press in edit mode
 */
sub enterKeyWhileEditing() {
	lda @LASTKEY
	cmp #'0'
	IF (>=) {
		cmp #'9'
		IF (<=) {			; '0-9'
			jsr processKeyWhileEditing
		}
		ELSE {
			cmp #'A'
			IF (>=) {
				cmp #'F'
				IF (<=) {	; 'A-F'
					jsr processKeyWhileEditing
				}
				ELSE {
					cmp #'a'
					IF (>=) {
						cmp #'f'
						IF (<=) {	; 'a-f'
							jsr processKeyWhileEditing
						}
					}
				}
			}
		}
	}

	RETURN
}
sub processKeyWhileEditing() {
	lda @NEWVALUEH
	IF (==) {
		lda @LASTKEY
		sta @NEWVALUEH
	}
	ELSE {
		lda @NEWVALUEL
		IF (==) {
			lda @LASTKEY
			sta @NEWVALUEL
		}
	}

	jsr showEditCursor
	RETURN
}
sub startEditing() {
	var ROWPTR = %R180.w			; Pointer to the row of characters on TEXT 2

	ldx @TXTROW
	jsr (os4_ClearRow)
	stz @TXTPOS
	lda.t #EditingStr
	sta.t %%7
	jsr (os4_PrintString)

	ldx @CURSORY				; Save the existng values (from screen memory instead of file memory)
	xsl							; X = CURSORY * 2 (as the table of row pointers is 2 bytes per entry)
	lda.w Text2ScreenBase,X
	sta.w @ROWPTR
	clc
	lda @CURSORX				; Y = 6 + CURSORX * 3, for 0 <= X <= 7
	adc @CURSORX
	adc @CURSORX
	adc #6
	tay
	lda (@ROWPTR),y
	sta @OLDVALUEH
	iny
	lda (@ROWPTR),y
	sta @OLDVALUEL

	stz @NEWVALUEH
	stz @NEWVALUEL
	lda #1
	sta @EDITING
	jsr showEditCursor

	RETURN
}
sub cancelEditing() {
	var ROWPTR = %R180.w			; Pointer to the row of characters on TEXT 2

	ldx @TXTROW
	jsr (os4_ClearRow)
	stz @TXTPOS

	stz @EDITING
	jsr hideEditCursor

	ldx @CURSORY				; Restore the old values (saved from screen memory instead of file memory)
	xsl							; X = CURSORY * 2 (as the table of row pointers is 2 bytes per entry)
	lda.w Text2ScreenBase,X
	sta.w @ROWPTR
	clc
	lda @CURSORX				; Y = 6 + CURSORX * 3, for 0 <= X <= 7
	adc @CURSORX
	adc @CURSORX
	adc #6
	tay
	lda @OLDVALUEH
	sta (@ROWPTR),y
	iny
	lda @OLDVALUEL
	sta (@ROWPTR),y

	RETURN	
}
sub endEditing() {
	lda @NEWVALUEH				; If new values were not entered, then cancel the edit
	IF (==) {
		jmp cancelEditing
	}
	lda @NEWVALUEL
	IF (==) {
		jmp cancelEditing
	}

	ldx @TXTROW
	jsr (os4_ClearRow)
	stz @TXTPOS

	stz @EDITING
	jsr hideEditCursor

	RETURN	
}


/*
 *  Draw the values from the file
 */
sub drawValues() {
	var ROWNUM 		= %R64
	var FILEPTR 	= %R65.t
	var OFFSET		= %R68.w
	var IDX 		= %R70

	lda.t @HEAPSTART					; Load the file in the heap memory above the program
	sta.t @FILEPTR						; Store this in zp for (zp),Y lookups

	lda.w @VIEWYFROM					; File offset starts at  first visible Y row * 8
	asl.w
	asl.w
	asl.w
	sta.w @OFFSET

	jsr overwriteScreenBase				; Setup to write to TEXT page 2

	stz @ROWNUM
	LOOP {
		lda #'$'H						; $offset- xx xx xx xx xx xx xx xx ........
		jsr (os4_PrintChar)
		lda.t @OFFSET
		jsr (os4_PrintHexWord)
		lda #'-'H
		jsr (os4_PrintChar)

		FOR @IDX = 0 to 7 {				; Print the value as $HH
			clc
			lda.w @OFFSET
			adc.w @IDX
			tay.w
			lda.a24 (@FILEPTR),Y
			jsr (os4_PrintHexByte)
			jsr (os4_PrintSpace)
		}
		FOR @IDX = 0 to 7 {
			clc
			lda.w @OFFSET
			adc.w @IDX
			tay.w
			lda.a24 (@FILEPTR),Y
			IF (< 128) {				; Print the (HIGH) ASCII equivalent of the value (except $00 = '.')
				IF (== 0) {
					lda #'.'H
				}
				ELSE {
					clc
					adc #128
				}
			}
			jsr (os4_PrintChar)
		}

		clc
		lda.w @OFFSET
		adc.w #8
		sta.w @OFFSET

		jsr nextLineText2
		; @@@ check if fewer than 23 rows to display, and BREAK

		inc @ROWNUM
		lda @ROWNUM
		if (> 11) {
			nop
		}
		if (> 23) {
			BREAK
		}
	}

	jsr restoreScreenBase			; Restore back to TEXT page 1

	RETURN
}
sub overwriteScreenBase() {
	lda @TXTROW						; Save the TXT row and pos
	sta @SAVEDROW
	lda @TXTPOS
	sta @SAVEDPOS

	stz @TXTROW						; Reset to 0,0
	stz @TXTPOS
	lda.w Text2ScreenBase			; Lookup the address and copy to @TXTPTR
	sta.w @TXTPTR
	rts.a24
}
sub nextLineText2() {
	stz @TXTPOS						; Reset to position 0
	inc @TXTROW						; Increment the current row
	ldx @TXTROW
	xsl
	lda.w Text2ScreenBase,X			; Lookup the address and copy to @TXTPTR
	sta.w @TXTPTR
	rts.a24
}
sub restoreScreenBase() {
	lda @SAVEDROW					; Restore the TXT row and pos
	sta @TXTROW
	lda @SAVEDPOS
	sta @TXTPOS
	jsr (os4_SetScreenBase)			; Restore the TXTPTR
	rts.a24
}



/*
 *  Draw and undraw the cursor
 */
sub drawCursor() {
	var ROWPTR = %R180.w			; Pointer to the row of characters on TEXT 2
	var CURXPOS = %R179

	ldx @CURSORY					; X = CURSORY * 2 (as the table of row pointers is 2 bytes per entry)
	xsl
	lda.w Text2ScreenBase,X
	sta.w @ROWPTR
	clc
	lda @CURSORX					; Y = 6 + CURSORX * 3, for 0 <= X <= 7
	adc @CURSORX
	adc @CURSORX
	adc #6
	tay
	lda (@ROWPTR),y
	and #$3f						; Invert top nibble
	sta (@ROWPTR),y
	iny
	lda (@ROWPTR),y
	and #$3f						; Invert bottom nibble
	sta (@ROWPTR),y

	RETURN
}
sub hideCursor() {
	var ROWPTR = %R180.w		; Pointer to the row of characters on TEXT 2
	var CURXPOS = %R179

	ldx @CURSORY				; X = CURSORY * 2 (as the table of row pointers is 2 bytes per entry)
	xsl
	lda.w Text2ScreenBase,X
	sta.w @ROWPTR
	clc
	lda @CURSORX				; Y = 6 + CURSORX * 3, for 0 <= X <= 7
	adc @CURSORX
	adc @CURSORX
	adc #6
	tay
	lda (@ROWPTR),y
	ora #$80					; Uninvert top nibble
	sta (@ROWPTR),y
	iny
	lda (@ROWPTR),y
	ora #$80					; Uninvert bottom nibble
	sta (@ROWPTR),y

	RETURN
}


/*
 *  Draw and undraw the cursor in edit mode
 */
sub showEditCursor() {
	var ROWPTR = %R180.w		; Pointer to the row of characters on TEXT 2
	var CURXPOS = %R179

	ldx @CURSORY				; X = CURSORY * 2 (as the table of row pointers is 2 bytes per entry)
	xsl
	lda.w Text2ScreenBase,X
	sta.w @ROWPTR
	clc
	lda @CURSORX				; Y = 6 + CURSORX * 3, for 0 <= X <= 7
	adc @CURSORX
	adc @CURSORX
	adc #6
	tay
	lda @NEWVALUEH
	IF (==) {
		lda #'*'
		and #$3f
	}
	sta (@ROWPTR),y
	iny
	lda @NEWVALUEL
	IF (==) {
		lda #'*'
		and #$3f
	}
	sta (@ROWPTR),y

	RETURN
}
sub hideEditCursor() {
	var ROWPTR = %R180.w		; Pointer to the row of characters on TEXT 2
	var CURXPOS = %R179

	ldx @CURSORY				; X = CURSORY * 2 (as the table of row pointers is 2 bytes per entry)
	xsl
	lda.w Text2ScreenBase,X
	sta.w @ROWPTR
	clc
	lda @CURSORX				; Y = 6 + CURSORX * 3, for 0 <= X <= 7
	adc @CURSORX
	adc @CURSORX
	adc #6
	tay
	lda (@ROWPTR),y
	ora #$80					; Uninvert top nibble
	sta (@ROWPTR),y
	iny
	lda (@ROWPTR),y
	ora #$80					; Uninvert bottom nibble
	sta (@ROWPTR),y

	RETURN
}

/*
 *  Draw and undraw the cursor in edit mode
 */
sub storeNewValue() {
	RETURN
}


/*
 *  Lookup and execute the typed command
 */
sub DoHelp() {
	var I	= @$04						; loop variable
	var I6	= @$05						; I * 6
	var COL	= @$06						; column 0/12/24

	jsr (os4_ResetPaginate)
	lda #PAGINATE_LINES_PER_PAGE
	sta %%7
	jsr (os4_PaginateLine)

	lda.t #HelpUDLRStr
	sta.t %%7
	jsr (os4_PrintString)
	lda #PAGINATE_LINES_PER_PAGE
	sta %%7
	jsr (os4_PaginateLine)

	lda.t #HelpPMStr
	sta.t %%7
	jsr (os4_PrintString)
	lda #PAGINATE_LINES_PER_PAGE
	sta %%7
	jsr (os4_PaginateLine)

	lda.t #HelpEditStr
	sta.t %%7
	jsr (os4_PrintString)
	lda #PAGINATE_LINES_PER_PAGE
	sta %%7
	jsr (os4_PaginateLine)
	jsr (os4_PaginateLine)

	lda.t #HelpListStr
	sta.t %%7
	jsr (os4_PrintString)
	lda #PAGINATE_LINES_PER_PAGE
	sta %%7
	jsr (os4_PaginateLine)
	jsr (os4_PaginateLine)

	@I = 1
	@COL = 0
	DO {
		jsr (os4_PrintSpace)

		lda @I							; X = @M$04 * 6 = (@M$04 * 4) + (@M$04 * 2)
		A <<= 2
		sta @I6
		lda @I
		A <<= 1
		clc
		adc @I6
		sta @I6
		tax

  		lda.t CommandList,X				; CommandList[X].string
  		sta.t %%7
		jsr (os4_PrintString)

		lda @COL
		IF ==  {
			@COL = 1
			@TXTPOS = 12
		}
		ELSE {
			IF == 1 {
				@COL = 2
				@TXTPOS = 24
			}
			IF == 2 {
				@COL = 0
				lda #PAGINATE_LINES_PER_PAGE
				sta %%7
				jsr (os4_PaginateLine)
			}
		}

		inc @I
		lda @I
	}
	WHILE (< N_COMMANDS)

	jsr (os4_NextLine)
	jsr (os4_NextLine)
	RETURN 0
}


/*
 *  'load' filename
 *
 */
sub DoLoad(NPRM %%0, CMD %%0.1, FILENAME %%0.4) {
	jsr (os4_NextLine)

	lda @NPRM						; must specify a filename
	if (< 1) {
		lda.t #NoFilenameErrStr
		sta.t %%7
		jsr (os4_PrintError)
		RETURN
	}
	lda.t @FILENAME					; filename exists?
	IF (==) {
		lda #NoFilenameErrStr
		sta.t %%7
		jsr (os4_PrintError)
		RETURN
	}
	sta.t %%6

	var FN = %R3.b
	jsr (os4_Disk4Open)
	if (!=) {
		jsr (os4_Disk4PrintError)
		RETURN
	}
	stx @FN
	stx @DISK4_PARAM0

	var R_IDX = %R4.t					; index of total bytes read across all loops
	var ACTUAL = %R7.w					; actual bytes read per Disk4Read
	var C_IDX = %R9.w					; bytes copied from the read buffer

	stz.t @R_IDX
	LOOP {
		jsr (os4_Disk4Read)
		if (== DISK4_END_OF_FILE) {		; Until EOF
			BREAK
		}
		lda.t @DISK4_RET0				; Or check for zero byes (to be safe)
		IF (==) {
			BREAK
		}
		sta.w @ACTUAL

		stz.w @C_IDX
		LOOP {
			ldx.w #@DISK4_RAM			; Load from $C800,Y
			ldy.w @C_IDX
			lda.a24 XY
			inc.t @C_IDX

			ldx.t @HEAPSTART			; Store in the heap
			ldy.t @R_IDX
			sta.a24 XY
			inc.t @R_IDX

			ldy.w @C_IDX				; Until @C_IDX == @ACTUAL
			cpy.w @ACTUAL
			IF (==) {
				BREAK
			}
		}
	}

	lda.w @ACTUAL						; Remember the file size
	sta.w @FILESIZE
	jsr calculateRows

	lda @FN
	jsr (os4_Disk4Close)

	lda.t #LoadedStr
	sta.t %%7
	jsr (os4_PrintString)
	lda.t @FILENAME
	sta.t %%7
	jsr (os4_PrintString)
	jsr (os4_PrintSpace)
	jsr (os4_NextLine)
	jsr (os4_NextLine)

	RETURN
}


/*
 *  'store' - Store memory to a file
 */
sub DoStore(NPRM %%0, CMD %%0.1, FILENAME %%0.4) {
	jsr hideCursor
	jsr (os4_NextLine)

	lda @NPRM						; must specify a filename
	if (< 1) {
		lda.t #NoFilenameErrStr
		sta.t %%7
		jsr (os4_PrintError)
		RETURN
	}
	lda.t @FILENAME					; filename exists?
	IF (==) {
		lda #NoFilenameErrStr
		sta.t %%7
		jsr (os4_PrintError)
		RETURN
	}
	sta.t %%6

	lda.t #BINFileType
	sta.t %%6.3

	var FN = %R3.b
	jsr (os4_Disk4Create)
	if (!=) {
		jsr (os4_Disk4PrintError)
		RETURN
	}
	stx @FN
	stx @DISK4_PARAM0

	var REMAINING = %R4.w				; bytes remaining to be written
	var W_IDX = %R7.t					; index of total bytes read across all loops
	var C_IDX = %R10.t					; bytes copied to the write buffer

	lda.w @FILESIZE						; the length of the file (in bytes)
	sta.w @REMAINING

	stz.t @W_IDX
	LOOP {
		jsr (os4_Disk4C800)				; Enable writing to $C800
		stz.t @C_IDX
		LOOP {
			ldx.t @HEAPSTART			; Load from @HEAPSTART,Y
			ldy.t @W_IDX
			lda.a24 XY
			inc.t @W_IDX

			ldx.w #@DISK4_RAM			; Store in $C800,Y
			ldy.t @C_IDX
			sta.a24 XY
			inc.t @C_IDX

			lda.t @C_IDX				; Until @C_IDX == @ACTUAL
			cmp.t @REMAINING
			IF (==) {
				BREAK
			}
			cmp.t #1024					; Or up to 1024 bytes
			IF (==) {
				BREAK
			}
		}
		sta.t @DISK4_PARAM1				; Number of bytes

		lda.t @REMAINING				; @REMAINING -= @C_IDX
		sec
		sbc @C_IDX
		sta.w @REMAINING

		jsr (os4_Disk4Write)
		if (!=) {						; All errors are bad
			jsr (os4_Disk4PrintError)
			BREAK
		}

		lda.t @REMAINING				; Stop when all the bytes are written
		IF (==) {
			BREAK
		}
	}

	lda @FN
	jsr (os4_Disk4Close)

	lda.t #StoredStr
	sta.t %%7
	jsr (os4_PrintString)
	lda.t @FILENAME
	sta.t %%7
	jsr (os4_PrintString)
	jsr (os4_NextLine)
	jsr (os4_NextLine)

	RETURN
}


/*
 *  Move the cursor
 */
sub DoX(NPRM %%0, CMD %%0.1, XPOS %%0.4) {
	lda @NPRM						; no coordinate specified
	if (< 1) {
		lda.t #MissingValueErr
		sta.t %%7
		jsr (os4_PrintError)
		RETURN
	}

	lda.t @XPOS						; parse the position
	sta.t %%7
	jsr (os4_ParseNumber)
	cmp #7
	IF (>) {
		lda #7
	}
	sta @XPOS

	jsr hideCursor
	lda @XPOS
	sta @CURSORX
	jsr drawCursor

	RETURN 0
}
sub DoY(NPRM %%0, CMD %%0.1, YPOS %%0.4) {
	lda @NPRM						; no coordinate specified
	if (< 1) {
		lda.t #MissingValueErr
		sta.t %%7
		jsr (os4_PrintError)
		RETURN
	}

	lda.t @YPOS						; parse the position
	sta.t %%7
	jsr (os4_ParseNumber)
	cmp @NFILEROWS
	IF (>=) {
		lda.w @NFILEROWS			;; @@@ FIX ME
		dec.w
	}
	sta @YPOS

	jsr hideCursor
	lda @YPOS
	sta @CURSORY
	jsr drawCursor

	RETURN 0
}

/*
 *  Quit the program
 */
sub DoQuit() {
	lda #DISP_TEXT_1
	jsr (os4_SetScreenMode)

	RETURN $ff
}



/*
 *  Lookup and execute the typed command
 */
sub CommandLine() {
	var I	= @$04						; loop variable
	var I6	= @$05						; I * 6

	lda @INPBUFFER						; Check for blank line
	IF (==) {
		RETURN
	}

	lda.t #@INPBUFFER
	sta.t %%7
	jsr (os4_ParseInputParams)

	lda.t %%0.1							; strA for CompareText
	sta.t %%7
	FOR @I = 0 TO N_COMMANDS-1 {
		lda @I							; X = @M$04 * 6 = (@M$04 * 4) + (@M$04 * 2)
		A <<= 2
		sta @I6
		lda @I
		A <<= 1
		clc
		adc @I6
		sta @I6
		tax

  		lda.t CommandList,X				; CommandList[X].string
  		sta.t %%7.3
		jsr (os4_CompareTextCI)
		IF - {
			ldx @I6
	  		lda.t CommandList+3,X		; CommandList[X].func
	  		sta.t %R0
			jsr.a24 (%R0)
			sta %%0.255					; Store the return code (!= is quit)
			RETURN
		}
	}

	lda.t #UnknownCommandErr
	sta.t %%7
	jsr (os4_PrintError)
	stz %%0.255							; Doubly sure not to quit over this
	RETURN
}

/*
 *  Try and complete the command
 */
sub CompleteCommand() {
	var I	= @$04						; loop variable
	var I6	= @$05						; I * 6

	lda #@INPBUFFER						; %%7 <- TEXT buffer
	sta.t %%7
	FOR @I = 0 TO N_COMMANDS-1 {
		lda @I							; X = @M$04 * 6 = (@M$04 * 4) + (@M$04 * 2)
		A <<= 2
		sta @I6
		lda @I
		A <<= 1
		clc
		adc @I6
		sta @I6
		tax

  		lda.t CommandList,X				; CommandList[X].string
  		sta.t %%7.3
		jsr (os4_CompareStartOfTextCI)
		IF - {
			ldx @I6
	  		lda.t CommandList,X			; %%0.1 <- CommandList[X].string
	  		sta.t %%7
			lda #@INPBUFFER				; %%7.3 <- TEXT buffer
			sta.t %%7.3
			jsr (os4_CopyString)
			lda.w @TXTPTR				; @TXTPTR <- Current line on TEXT screen
			inc.w						;  +2 for the cursor
			inc.w
			sta.t %%7.3
			jsr (os4_CopyStringHigh)
			iny							;  +2 for the cursor
			iny
			sty @TXTPOS					; CopyString leaves the length of the string in Y
			jsr (os4_PrintCursor)
			RETURN
		}
	}

	RETURN
}


/*
 *  Clear the text input buffers (255 bytes, filled with zeros)
 */
sub ClearInputBuffers() {
	lda #0
	FOR X = 0 TO 255 {
		sta @INPBUFFER,x
	}
	rts.a24
}

/*
 *  Clear the text input buffer (128 bytes, filled with zeros)
 */
sub ClearCurrentInputBuffer() {
	lda #0
	FOR X = 0 TO 79 {
		sta @INPBUFFER,x
	}
	RETURN
}

/*
 *  Copy the previous input buffer into the current buffer (128 bytes)
 */
sub PrevToCurrentInputBuffer() {
	FOR X = 0 TO 79 {
		lda @INPBUFFER2,x
		sta @INPBUFFER,x

		lda @INPBUFFER3,x
		sta @INPBUFFER2,x
	}
	RETURN
}

/*
 *  Copy the previous input buffer into the current buffer (128 bytes)
 */
sub CurrentToPrevInputBuffer() {
	FOR X = 0 TO 79 {
		lda @INPBUFFER2,x
		sta @INPBUFFER3,x

		lda @INPBUFFER,x
		sta @INPBUFFER2,x
	}
	RETURN
}

/*
 *  Copy the current text input buffer to the current line on the TEXT screen
 */
sub InputBufferToTextScreen() {
	ldy #3
	FOR X = 0 TO 79 {
		lda @INPBUFFER,x
		IF (== 0) {
			sty @TXTPOS
			BREAK
		} 
		ora #$80
		sta (@TXTPTR),y
		iny
	}
	lda #' 'H
	LOOP {
		cpy #40
		IF (==) {
			BREAK
		}
		sta (@TXTPTR),y
		iny
	}
	RETURN
}


/*
 *  Calculate the number of rows given @FILESIZE in bytes
 */
sub calculateRows() {
	lda.w @FILESIZE						; #Rows = file size / 8 (rounded up)
	clc
	adc.w #7
	lsr.w
	lsr.w
	lsr.w
	sta.w @NFILEROWS

	stz.w @VIEWYFROM					; View from Y coordinate @VIEWYFROM to @VIEWYTO
	lda #23
	cmp.w @NFILEROWS
	if (>) {
		lda.w @NFILEROWS
		sta.w @VIEWYTO
	}
	ELSE {
		sta.w @VIEWYTO
	}

	RETURN
}
sub updateViewableRows() {
	lda.w @VIEWYFROM					; View from Y coordinate @VIEWYFROM to @VIEWYTO
	clc
	adc.w #23
	cmp.w @NFILEROWS
	if (>) {
		lda.w @NFILEROWS
		sta.w @VIEWYTO
	}
	ELSE {
		sta.w @VIEWYTO
	}

	RETURN
}

/*
 *  Fill TEXT page 2 with spaces from row 0 to row 23
 */
sub clearText2Screen(FIRST_ROW X) {
	var ROWPTR = %R180.w

	ldx #0
	DO {
		lda.w Text2ScreenBase,X			; Pre-calculated row values
		sta.w @ROWPTR
		lda #$A0 						; $20 (space) | $80 (high ASCII)
		FOR Y = 0 TO 39 {				; 40 columns
			sta (@ROWPTR),y
		}
		inx
		inx
		cpx #48							; 24 rows (x2 bytes pre row pointer)
	}
	WHILE (!=)
	RETURN
}


/*
 *  Print a hex byte in the top right corner of the screen
 */
sub debugValueT2(VALUE A) {
	pha						; Save A
	pha						; Copy A for 2nd digit
	A >>= 4					; Draw hex of 1st nibble
	IF >= 10 {
		A += $B7
	}
	ELSE {
		A += $B0
	}
	sta $826				; Hardcoded to top-right corner of the TEXT 2 screen
	pla						; Draw hex of 2nd nibble
	A &= $0F
	IF >= 10 {
		A += $B7
	}
	ELSE {
		A += $B0
	}
	sta $827				; Hardcoded to top-right corner of the TEXT 2 screen
	pla						; Restore A
	RETURN
}
sub debugValueA(VALUE A) {
	pha						; Save A
	pha						; Copy A for 2nd digit
	A >>= 4					; Draw hex of 1st nibble
	IF >= 10 {
		A += $B7
	}
	ELSE {
		A += $B0
	}
	sta $426				; Hardcoded to top-right corner of the TEXT screen
	pla						; Draw hex of 2nd nibble
	A &= $0F
	IF >= 10 {
		A += $B7
	}
	ELSE {
		A += $B0
	}
	sta $427				; Hardcoded to top-right corner of the TEXT screen
	pla						; Restore A
	RETURN
}
sub debugValueB(VALUE A) {
	pha						; Save A
	pha						; Copy A for 2nd digit
	A >>= 4					; Draw hex of 1st nibble
	IF >= 10 {
		A += $B7
	}
	ELSE {
		A += $B0
	}
	sta $423				; Hardcoded to top-right corner of the TEXT screen
	pla						; Draw hex of 2nd nibble
	A &= $0F
	IF >= 10 {
		A += $B7
	}
	ELSE {
		A += $B0
	}
	sta $424				; Hardcoded to top-right corner of the TEXT screen
	pla						; Restore A
	RETURN
}
sub debugValueC(VALUE A) {
	pha						; Save A
	pha						; Copy A for 2nd digit
	A >>= 4					; Draw hex of 1st nibble
	IF >= 10 {
		A += $B7
	}
	ELSE {
		A += $B0
	}
	sta $420				; Hardcoded to top-right corner of the TEXT screen
	pla						; Draw hex of 2nd nibble
	A &= $0F
	IF >= 10 {
		A += $B7
	}
	ELSE {
		A += $B0
	}
	sta $421				; Hardcoded to top-right corner of the TEXT screen
	pla						; Restore A
	RETURN
}

/*  The title of the screen */
data Header string {
	"BIN-Edit ][4 - a BIN file editor"
}

/*  Display when editing */
data EditingStr string {
	"-- EDITING --"
}

/*  Help information */
data HelpEditStr string {
	" ENTER - Edit value"
}
data HelpUDLRStr string {
	" up/down/left/right - Move Cursor"
}
data HelpPMStr string {
	" +/- - Next/Previous Page"
}
data HelpListStr string {
	" BIN-Edit COMMANDS:"
}
data LoadedStr string {
	"LOADED: "
}
data StoredStr string {
	"STORED: "
}

data BINFileType string {
	"BIN"
}

/*  The command was unknown */
data UnknownCommandErr string {
	"** ERROR: Unknown command"
}
data NoFilenameErrStr string {
	"** FILENAME must be specified"
}

/*  Error strings */
data MissingValueErr string {
	"** ERROR: Missing VALUE"
}
data MissingStartErr string {
	"** ERROR: Missing START value"
}
data MissingEndErr string {
	"** ERROR: Missing END value"
}



/*
 *  The addresses of the 24 LORES rows
 */
data Text2ScreenBase word {
	$0800, $0880, $0900, $0980, $0A00, $0A80, $0B00, $0B80
	$0828, $08A8, $0928, $09A8, $0A28, $0AA8, $0B28, $0BA8
	$0850, $08D0, $0950, $09D0, $0A50, $0AD0, $0B50, $0BD0
}

/*
 *  The list of commands
 */
data CMD_Help string { "?" }
data CMD_Load string { "load" }
data CMD_Store string { "store" }
data CMD_X string { "x" }
data CMD_Y string { "y" }
data CMD_Quit string { "quit" }

data CommandList u24 {
	CMD_Help, DoHelp
	CMD_Load, DoLoad
	CMD_Store, DoStore
	CMD_X, DoX
	CMD_Y, DoY
	CMD_Quit, DoQuit
}
